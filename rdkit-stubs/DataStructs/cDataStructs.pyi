from typing import ClassVar, overload

from ..Chem import AtomPairsParameters
from ..rdBase import _vecti

class ExplicitBitVect:
    @overload
    def __init__(self, arg: str = ...) -> None: ...
    @overload
    def __init__(self, size: int, bitsSet: bool) -> None: ...
    def FromBase64(self, value: str) -> None: ...
    def GetBit(self, idx: int) -> bool: ...
    def GetNumBits(self) -> int: ...
    def GetNumOffBits(self) -> int: ...
    def GetNumOnBits(self) -> int: ...
    def GetOnBits(self) -> _vecti: ...
    def SetBit(self, idx: int) -> bool: ...
    def SetBitsFromList(self, value: AtomPairsParameters) -> None: ...
    def ToBase64(self) -> str: ...
    def ToBinary(self) -> bytes: ...
    def ToBitString(self) -> str: ...
    def ToList(self) -> list[int]: ...
    def UnSetBit(self, idx: int) -> bool: ...
    def UnSetBitsFromList(self, value: AtomPairsParameters) -> None: ...
    def __add__(self, other: ExplicitBitVect) -> ExplicitBitVect: ...
    def __and__(self, other: ExplicitBitVect) -> ExplicitBitVect: ...
    def __getitem__(self, key: int) -> int: ...
    def __iadd__(self, other: ExplicitBitVect) -> ExplicitBitVect: ...
    def __invert__(self) -> ExplicitBitVect: ...
    def __len__(self) -> int: ...
    def __or__(self, other: ExplicitBitVect) -> ExplicitBitVect: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __xor__(self, other: ExplicitBitVect) -> ExplicitBitVect: ...
    __instance_size__: int
    __safe_for_unpickling__: bool

class SparseBitVect:
    def __init__(self, arg: str = ...) -> None: ...
    def FromBase64(self, value: str) -> None: ...
    def GetBit(self, idx: int) -> bool: ...
    def GetNumBits(self) -> int: ...
    def GetNumOffBits(self) -> int: ...
    def GetNumOnBits(self) -> int: ...
    def GetOnBits(self) -> _vecti: ...
    def SetBit(self, idx: int) -> bool: ...
    def SetBitsFromList(self, value: AtomPairsParameters) -> None: ...
    def ToBase64(self) -> str: ...
    def ToBinary(self) -> bytes: ...
    def ToBitString(self) -> str: ...
    def ToList(self) -> list[int]: ...
    def UnSetBit(self, idx: int) -> bool: ...
    def UnSetBitsFromList(self, value: AtomPairsParameters) -> None: ...
    def __add__(self, other: SparseBitVect) -> SparseBitVect: ...
    def __and__(self, other: SparseBitVect) -> SparseBitVect: ...
    def __getitem__(self, key: int) -> int: ...
    def __iadd__(self, other: SparseBitVect) -> SparseBitVect: ...
    def __invert__(self) -> SparseBitVect: ...
    def __len__(self) -> int: ...
    def __or__(self, other: SparseBitVect) -> SparseBitVect: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __xor__(self, other: SparseBitVect) -> SparseBitVect: ...
    __instance_size__: int
    __safe_for_unpickling__: bool

class DiscreteValueType(int):
    EIGHTBITVALUE: ClassVar[DiscreteValueType]
    FOURBITVALUE: ClassVar[DiscreteValueType]
    ONEBITVALUE: ClassVar[DiscreteValueType]
    SIXTEENBITVALUE: ClassVar[DiscreteValueType]
    TWOBITVALUE: ClassVar[DiscreteValueType]
    names: ClassVar[dict[str, DiscreteValueType]]
    values: ClassVar[dict[int, DiscreteValueType]]
    name: str

class DiscreteValueVect:
    def __init__(self, value: str = ...) -> None: ...
    def GetTotalVal(self) -> int: ...
    def GetValueType(self) -> DiscreteValueType: ...
    def __add__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    def __and__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    def __getitem__(self, key: int) -> int: ...
    def __iadd__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    def __isub__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    def __len__(self) -> int: ...
    def __or__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __sub__(self, other: DiscreteValueVect) -> DiscreteValueVect: ...
    __instance_size__: int
    __safe_for_unpickling__: bool
