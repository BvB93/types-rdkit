from collections.abc import Iterable, Iterator
from typing import Protocol, TypeVar, type_check_only

_T = TypeVar("_T")
_T_co = TypeVar("_T_co", covariant=True)

@type_check_only
class _VectBase(Protocol[_T]):
    def __contains__(self, __key: object) -> bool: ...
    def __delitem__(self, __key: int) -> None: ...
    def __getitem__(self, __key: int) -> _T: ...
    def __iter__(self) -> Iterator[_T]: ...
    def __len__(self) -> int: ...
    def __setitem__(self, __key: int, value: _T) -> None: ...
    def append(self, __value: _T) -> None: ...
    def extend(self, __value: Iterable[_T]) -> None: ...

@type_check_only
class _SeqBase(Protocol[_T_co]):
    def __next__(self) -> _T_co: ...
    def __len__(self) -> int: ...
    def __getitem__(self, __key: int) -> _T_co: ...
    def __iter__(self) -> Iterator[_T_co]: ...

@type_check_only
class _SupportsLenAndGetitem(Protocol[_T_co]):
    def __len__(self) -> int: ...
    def __getitem__(self, key: int) -> _T_co: ...
