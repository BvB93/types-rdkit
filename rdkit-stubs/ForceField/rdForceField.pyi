from typing import Any
from typing_extensions import Literal

from ..Chem import AtomPairsParameters, Mol

class ForceField:
    def AddDistanceConstraint(self, idx1: int, idx2: int, minLen: float, maxLen: float, forceConstant: float) -> None: ...
    def AddExtraPoint(self, x: float, y: float, z: float, fixed: bool = True) -> None: ...
    def AddFixedPoint(self, idx: int) -> None: ...
    def CalcEnergy(self, pos: None | AtomPairsParameters = ...) -> float: ...
    def CalcGrad(self) -> tuple[float, float, float]: ...
    def Dimension(self) -> int: ...
    def GetExtraPointPos(self, idx: int) -> tuple[float, float, float]: ...
    def Initialize(self) -> None: ...
    def MMFFAddAngleConstraint(
        self, idx1: int, idx2: int, idx3: int, relative: bool, minAngleDeg: float, maxAngleDeg: float, forceConstant: float
    ) -> None: ...
    def MMFFAddDistanceConstraint(
        self, idx1: int, idx2: int, relative: bool, minLen: float, maxLen: float, forceConstant: float
    ) -> None: ...
    def MMFFAddPositionConstraint(self, idx: int, maxDispl: float, forceConstant: float) -> None: ...
    def MMFFAddTorsionConstraint(
        self,
        idx1: int,
        idx2: int,
        idx3: int,
        idx4: int,
        relative: bool,
        minDihedralDeg: float,
        maxDihedralDeg: float,
        forceConstant: float,
    ) -> None: ...
    def Minimize(self, maxIts: int = ..., forceTol: float = ..., energyTol: float = ...) -> int: ...
    def MinimizeTrajectory(
        self, snapshotFreq: int, maxIts: int = ..., forceTol: float = ..., energyTol: float = ...
    ) -> tuple[int, list[Any]]: ...
    def NumPoints(self) -> int: ...
    def Positions(self) -> tuple[float, float, float]: ...
    def UFFAddAngleConstraint(
        self, idx1: int, idx2: int, idx3: int, relative: bool, minAngleDeg: float, maxAngleDeg: float, forceConstant: float
    ) -> None: ...
    def UFFAddDistanceConstraint(
        self, idx1: int, idx2: int, relative: bool, minLen: float, maxLen: float, forceConstant: float
    ) -> None: ...
    def UFFAddPositionConstraint(self, idx: int, maxDispl: float, forceConstant: float) -> None: ...
    def UFFAddTorsionConstraint(
        self,
        idx1: int,
        idx2: int,
        idx3: int,
        idx4: int,
        relative: bool,
        minDihedralDeg: float,
        maxDihedralDeg: float,
        forceConstant: float,
    ) -> None: ...

class MMFFMolProperties:
    def GetMMFFAngleBendParams(self, mol: Mol, idx1: int, idx2: int, idx3: int) -> None | tuple[int, float, float]: ...
    def GetMMFFAtomType(self, mol: Mol, idx: int) -> int: ...
    def GetMMFFBondStretchParams(self, mol: Mol, idx1: int, idx2: int) -> None | tuple[int, float, float]: ...
    def GetMMFFFormalCharge(self, idx: int) -> float: ...
    def GetMMFFOopBendParams(self, mol: Mol, idx1: int, idx2: int, idx3: int, idx4: int) -> None | float: ...
    def GetMMFFPartialCharge(self, idx: int) -> float: ...
    def GetMMFFStretchBendParams(self, mol: Mol, idx1: int, idx2: int, idx3: int) -> None | tuple[int, float, float]: ...
    def GetMMFFTorsionParams(
        self, mol: Mol, idx1: int, idx2: int, idx3: int, idx4: int
    ) -> None | tuple[int, float, float, float]: ...
    def GetMMFFVdWParams(self, idx1: int, idx2: int) -> None | tuple[float, float, float, float]: ...
    def SetMMFFAngleTerm(self, state: bool = ...) -> None: ...
    def SetMMFFBondTerm(self, state: bool = ...) -> None: ...
    def SetMMFFDielectricConstant(self, dielConst: float = ...) -> None: ...
    def SetMMFFDielectricModel(self, dielConst: float = ...) -> None: ...
    def SetMMFFEleTerm(self, state: bool = ...) -> None: ...
    def SetMMFFOopTerm(self, state: bool = ...) -> None: ...
    def SetMMFFStretchBendTerm(self, state: bool = ...) -> None: ...
    def SetMMFFTorsionTerm(self, state: bool = ...) -> None: ...
    def SetMMFFVariant(self, mmffVariant: Literal["MMFF94", "MMFF94s"] = ...) -> None: ...
    def SetMMFFVdWTerm(self, state: bool = ...) -> None: ...
    def SetMMFFVerbosity(self, verbosity: int = ...) -> None: ...
